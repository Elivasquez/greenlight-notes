{"title":"Recursion","message":"Recursion is to break down a problem into parts, where a function calls itself with arguments representing a smaller part of the problem until a certain end-case is met\nOnce the end case is met no more recursive calls will be made because the problem is fully processed\n\n**The Two parts to a recursive Function**\n* The base case (end case) Where a certain condition is met, signaling an end to the processing\n* A recursive case: There's still processing to do, so continue the process, and let the Function call itself, not mutating but modifying the arguments, such that the base case is eventually met\n\nAnything that requires a loop can also be solved with recursion \n\nIn ES6 you can lean on the feature of default parameters, setting a param to 0 if the param is not passed to the function\n\nRecursive calls are also like loops where they can go on forever and create a Stack Overflow if they don't have a condition that can be met\n\nStack Overflow comes from how function calls are executed by the Js interpreter\nThe interpreter holds a stack of Functions like an array of functions called the call stack\nPrograms essentially consist of one Function calling another until all Functions have returned\nIf one function is calling itself endlessly it creates a stack overflow and the program can never exits the process and crashes\n\nWhen it comes to using recursion its better for more complex problems in terms of comprehension\n\n","id":"b55b1b04-66c5-432b-8fb1-b579804a14e8","date":"2018-03-05T09:46:59.356Z"}