{"title":"Functional Program","message":"In functional programming the output of a function depends soley on the arguments passed to the function\nMeaning that calling a function twice with the same arguments will pass the same result\n\n* Use of expressions and a declaritive style of programming\n* Avoid side effects: changes in state that do not depend on the function inputs\n* Avoid Functions without return values, as they lack referential transparency\n* strive for pure functions\n\nSome side effects can be\n* Changing the value of global variables\n* Changing the value of variables in parent scopes\n* Changing the value of a static variable\n* Mutating mutable arguments (changing, adding or removing values stored in Arrays and Objects)\n* Writing or retrieving data from a file or web service\n* Raising an exception (throwing an error)\n\nReferentially transparent = it can be replaced with its corresponding value without changing the program's behavior\nPure functions are going to be referentially transparent which ensures predictability of a program\n","id":"3cc76c72-2c7c-42b2-986a-ff77b22caa65","date":"2018-03-05T09:20:16.358Z"}